#summary Instructions on how to create a space ship (sprite, data, etc.).

= Introduction =

Because one of the first things I imagine people will want to try out when customizing or expanding Endless Sky is to create a new kind of ship, I've tried to make that as easy as possible. All you need is a single image (which can be hand-drawn or generated by a 3D modeling program) and an entry in a data file.

= Sprites =

Most space games back in the 90s (after which this one is patterned) used a sprite sheet for each ship with pre-rendered images of it at a variety of rotations. This allowed for some cool effects (like realistic shadows that move across the ship as you turn). But, it also meant that turning had a choppy effect: if, for example, your sprite sheet had 36 images in it, your ship could only turn in 10-degree increments.

Endless Sky takes a simpler approach. Each ship is a single sprite, which is then drawn by OpenGL at different rotations. This means that the shadows don't move as you turn. But it also means that the ship's position and rotation can change by fractions of a pixel at a time, which makes all movement look much less choppy.

To keep the sprite sharp at any rotation, all ship sprites are twice as big as they are drawn on the screen:

https://endless-sky.googlecode.com/svn/trunk/images/ship/sparrow.png

If you are creating a human ship, it should be mostly shades of grey with some highlights in red, orange, and yellow. Depending on the government, the colors will be "swizzled" to green and yellow for the Free Worlds, blue and cyan for civilians, etc.

To create a new ship sprite, just add a PNG file to the images/ship/ directory. Everything in the images directory is automatically loaded when the game launches; no need to add it to a list anywhere.

For collision detection, for all images in images/ship/ and images/asteroid/, or one of their sub-folders, a polygonal outline is generated when the sprite is loaded. This means that it's important for your ship image to be in that folder, so the game knows to calculate its outline.

If you want your ship to be animated, just create multiple files with the same name, with "-#.png" appended:

  * images/ship/newship-0.png
  * images/ship/newship-1.png

(If there are more than 10 frames, the extensions should be "-00.png", "-01.png", etc. You can also create sprites with additive or "half-additive" blending modes by using the extension "+#.png" or "~#.png" respectively, but these blending modes look much better for projectiles or explosions than for ships.)

= Artistic tricks =

Making a full texture-mapped 3D model can be a lot of work, and since all the ships in this game are only shown from directly overhead and at relatively low resolution, it can be overkill. I've found that the fastest way to create good-looking ship images is to use a 3D design program (such as Blender) for rendering the shape of the ship and the basic colors of the different parts of it, but then using an image manipulation program (such as GIMP) for some post-processing.

https://endless-sky.googlecode.com/svn/trunk/images/ship/cruiser.png
https://endless-sky.googlecode.com/svn/trunk/images/ship/firebird.png
https://endless-sky.googlecode.com/svn/trunk/images/ship/gunboat.png
https://endless-sky.googlecode.com/svn/trunk/images/ship/leviathan.png
https://endless-sky.googlecode.com/svn/trunk/images/ship/mule.png

Editing images in GIMP, some easy ways to make the models look more detailed and less "artificial" include:

  * Find a public domain metal texture. Paste it into a separate layer, setting the layer's blending mode to "overlay" and adding an alpha channel to the layer if necessary. Erase portions of the texture so that it is only applied to certain parts of the ship. Repeat with other textures until each part of the ship is covered by at least one.
  * In a layer set to "multiply" mode, spray-paint with black to add extra shadows to the left side of the image and to other areas as you see fit. It often also looks good to add dark patches near the engine outlets, to make that part of the ship look a bit "burnt."
  * Spray-painting dark patches at a few corners or edges can also help make the metal look reflective.
  * In the "multiply" layer, spray paint with red over the yellow or orange paint sections to make the color less uniform.

If possible, try to edit the ship image at at least twice the resolution it will be saved at, in case we ever decide to update the game to support high-DPI monitors.

= Data =

For some examples, you can look at data/ships.txt. The easiest thing to do is to take an existing ship and modify it. If you don't want to change the ships.txt file, you can create a file with any name you like, define your ship there, and save it in the data directory. Each ship attributes is defined as a key name (such as "sprite") followed by (usually) one value. If a key or value has spaces in it, you must enclose it in quotation marks or it will be interpreted as two separate keys.

The data files use indentation, like in the Python language, to define sub-entries within an entry. For example, each ship is defined by a line reading `ship "Ship Name"` with no indentation, followed by several keys indented once:

  * "sprite": specifies which sprite the ship uses, relative to the "images/" folder, minus the frame number and any extension (e.g. "ship/newship" refers to "images/ship/newship-#.png").

  * "attributes": a list of characteristics of the ship, defined as key-value pairs.

  * "outfits": a list of names of outfits that are installed in this ship by default. To add multiple copies of one outfit, add a number after the name: `"Energy Blaster" 2`

  * "engine": the (x, y) coordinates, relative to the center of the sprite, where engine flares should appear. Positive y is up; negative y is down (e.g. `engine -12 -105`). There should be a separate "engine" line for each engine (usually two). 

  * "gun": the (x, y) coordinates of any gun ports. The number of gun outfits cannot exceed the number of gun port locations listed here.

  * "turret": the (x, y) coordinates of any turrets. The number of turret outfits cannot exceed the number of turret locations listed here.

  * "explode": an effect to create when the ship is dying, and the number of them to create. These effects are created randomly at an increasing rate until the ship finally explodes in one big explosion (e.g. `explode "small explosion" 10`).

The "attributes" key should be followed by a list of ship attributes, which include:

  * "required crew": the number of crew members needed to operate the ship without anything failing.

  * "bunks": the maximum number of people on the ship, including crew and passengers.

  * "drag": the maximum speed of the ship will be equal to "thrust" / "drag".

  * "mass": the mass of the ship's chassis, without any outfits or cargo. The higher the mass, the more thrust is needed in order to turn or accelerate at a certain rate.

  * "shields": maximum shield capacity. When a ship is hit, if it has any shields left they absorb the damage; otherwise the hull is damaged. Shields can recharge, whereas hulls generally can only be repaired when landing on a planet.

  * "hull": maximum hull strength. A ship is disabled when either it is reduced to 10% hull, or to the minimum of 25% hull or 100. (That is, small ships are disabled at 25%, and large ones at 10%.)

  * "cargo space": the amount of cargo that can be carried.

  * "outfit space": the amount of outfits (weapons, generators, engines, etc.) that can be installed.

  * "engine capacity": the amount of that outfit space which is suitable for installing engines. Some ships have lots of engine capacity but not much weapon capacity, or vice versa.

  * "weapon capacity": the amount of outfit space that can be occupied by weapons.

  * "fuel capacity": the amount of fuel (one jump = 100) that this ship can carry.

Outfits work by adding or subtracting to these same attributes.