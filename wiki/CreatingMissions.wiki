#summary How to create new missions

= Introduction =

The basic syntax of a mission description is:

{{{
mission <name>
    description <text>
    deadline (<days>)
    cargo <name><number> (<number> (<probability>))
        illegal <level>
        illegal <government> <level>
    passengers <number> (<number> (<probability>))
    invisible
    repeat (<number>)
    child <mission name>
        <mission name>*
    to (offer | complete)
        <condition> (<comp> <value>)
        not <condition>
    (source | destination)
        planet <name>*
            <name>*
        government <name>*
            <name>*
        attribute <name>*
            <name>*
        near <system> ((<min>) <max>)
        distance ((<min>) <max>)
    npc (save | kill | board | disable | "scan cargo" | "scan outfits")*
        (enter | remain | wait) (<system>)
            near <system> ((<min>) <max>)
            distance ((<min>) <max>)
        dialog <text>
            <text>*
        conversation <name>
        conversation
            ...
        ship <model> <name>
        ship <model>
            ...
        fleet <name>
        fleet
            ...
    on (offer | complete | accept | decline | fail)
        dialog <text>
            <text>*
        conversation <name>
        conversation
            ...
        outfit <outfit> (<number>)
        payment (<value>)
        <condition> (= | += | -= | ++ | --) (value)
        (set | clear) <condition>
        event <name> (delay)
}}}

Each of these parts of the mission description is described in detail below.

= Text replacements =

Certain characteristics of a mission, such as the cargo or the destination planet, may be chosen at random. In order to refer to those randomly chosen elements  in descriptive text, you can use the following placeholders:

  * `<commodity>` = name of commodity being carried
  * `<tons>` = "1 ton" or "N tons"
  * `<cargo>` = "`<tons>` of `<commodity>`"
  * `<passengers>` = "a passenger" or "N passengers"
  * `<origin>` = planet where mission was offered.
  * `<planet>` = destination planet
  * `<system>` = destination system
  * `<destination>` = "`<planet>`, in the `<system>` system"
  * `<payment>` = "1 credit" or "N credits"
  * `<date>` = the deadline for the mission.
  * `<npc>` = the name of the first NPC in the mission description.

These placeholders will be substituted in any text in the following places:

  * the mission name
  * the mission description
  * dialog messages contained in the mission
  * conversations contained in the mission

For example, the mission description might be, "Deliver `<cargo>` to `<destination>`, by `<date>`."

= Basic mission characteristics =

{{{
mission <name>
}}}

The mission name must be unique.

{{{
description <text>
}}}

This is a short description of the mission, with enough detail to make it clear to the player what they need to do to complete the mission, and what could cause the mission to fail.

{{{
deadline (<days>)
}}}

The number of days you have to complete the mission. If the number of days is left out (i.e. it is just the word "deadline", that means use the default deadline (2 days `*` number of hyperspace jumps to the destination). In a saved game, the `<days>` amount is stored as an absolute date instead of a relative number, e.g. "deadline 29 1 3014".

{{{
cargo <name> <number> (<number> (<probability>))
    illegal <level>
    illegal <government> <level>
}}}

This specifies the cargo that you are carrying. If `<name>` is one of the standard commodity names defined in the "trade" data, it will be replaced by a random one of the specific names for that commodity, e.g. "Food" might be replaced by "canned fruit" or "evaporated milk".

If two amounts are given instead of one, that means that a random amount should be chosen in between those two numbers (inclusive).

If three numbers are given, a random number will be chosen by adding the first number to a random number chosen from a negative binomial distribution with the given number of successes needed and probability. This produces numbers that are generally somewhat low but can occasionally be quite high, if you want to every once in a while have massive cargo missions, for example.

The cargo can optionally be marked with an illegality number between 1 and 5. For being caught carrying illegal cargo you will be fined 5000 `*` 10^level credits. In addition, being caught with level 5 illegal cargo carries an immediate death sentence. You can give different illegality levels for different governments, and/or specify a default level that applies to all governments.

{{{
passengers <number> (<number> (<probability>))
}}}

This specifies the number of passengers. As with the cargo specification, if there are two or three numbers they are used to pick a random number.

{{{
invisible
}}}

This specifies that the mission does not show up in the player's list of missions, and cannot be canceled.

{{{
repeat (<number>)
}}}

If the word "repeat" appears by itself, this mission can be offered any number of times. If a number is given, that is the maximum number of times this mission can be offered. By default, each mission can only be offered once, so having a "repeat 1" specified is unnecessary.

If you want a mission to be offered any number of times but to limit the number of instances of the mission that can be active concurrently, you can decrement the "`<mission name>`: offered" condition (described below) whenever the mission is completed, failed, or declined.

{{{
child <mission name>
    <mission name>*
}}}

This is a list of missions that will automatically be accepted when the player accepts this mission, and automatically removed from the list when this mission is removed (for any reason). No dialogs or conversations are shown when the mission is accepted, so any mission that is a "child" should not specify any. This allows you, for example, to have a mission automatically spawn sub-missions with random locations that must all be completed before the main mission is done.

= Conditions =

"Conditions" are named values that represent things the player has done. Conditions start out with a value of zero. Conditions can have almost any name you want, as long as you make sure not to use the same name in two places. A few names are reserved for special purposes:

  * `"<mission name>: offered"`, where `<mission name>` is replaced with the name of any mission. This is incremented whenever a mission is offered to you, and is used by the "repeat" check to make sure a mission is not offered too many times.
  * `"<mission name>: done"` is set when a mission is successfully completed.
  * `"reputation: <Government>"` is set to your current reputation with the given government.
  * "reputation" is your reputation in the current system.
  * "combat rating" is your current combat rating.
  * "random" is a random number between 0 and 1. This can be used to make a mission only sometimes appear when all other conditions are met.

Conditions are checked at two times when processing a mission: when determining whether the mission can be offered right now (in the "to offer" tag), and when determining whether it has been completed successfully (in the "to complete" tag):

{{{
to (offer | complete)
    <condition> (<comp> <value>)
    not <condition>
}}}

The `<comp>` comparison operator can be `==`, `!=`, `<`, `>`, `<=`, or `>=`. If only the condition name is given, the comparison is assumed to be "!= 0". As a special shortcut, you can write "not `<condition>`" instead of "`<condition>` == 0".

Conditions can be changed when you are offered a mission or when you accept, decline, fail, or complete it, as described later in this document. By making one mission set a condition on success, and another depend on nothing except that one condition, you can "chain" missions together. Since all your existing missions complete before new ones are offered, that condition will be set before the check is done for what new missions are available.

= Source and destination filters =

Each mission starts on a planet, and ends on a planet, usually different from where it started. Rather than having to specify the exact planet, you can give a set of constraints that the planet must match:

{{{
(source | destination)
    planet <name>*
        <name>*
    government <name>*
        <name>*
    attribute <name>*
        <name>*
    near <system> ((<min>) <max>)
    distance ((<min>) <max>)
}}}

If no destination is specified, the destination is the same as the source planet. This can be useful for missions that should end on the same planet they start on, such as "Kill pirate ship X and return here for payment." If no source is specified, the mission will never be offered except as a "job" specified in a planet's job board, or as a "child" of another mission.

Each entry in the source or destination specification acts as a filter:

{{{
planet <name>*
    <name>*
}}}

This says that the planet must be one of the named planets. The list of names can either be all on one line, or split between multiple lines if it is particularly long; the subsequent lines must be indented so that they are "children" of the "planet" node. As with most of these filters, you can also have more than one "planet" entry, in which case the planet chosen must be in any one of the lists.

{{{
government <name>*
    <name>*
}}}

The planet must be in a system owned by the given government. Again, the list can be all on one line, or multiple indented lines.

{{{
attribute <name>*
    <name>*
}}}

The planet must have one of the given attributes (e.g. "dirt belt", "urban", "rich", "tourism", etc.).

Unlike the other filters, if multiple "attribute" tags appear, the planet must contain at least one attribute from each of the lists. For example, this means the planet must be urban or rich:

{{{
attribute urban rich
}}}

but this means it must be urban _and_ rich:

{{{
attribute urban
attribute rich
}}}

There are also ways of specifying how far the system is from a particular location, or from the current location:

{{{
near <system> ((<min>) <max>)
}}}

If one number is given, the planet must be within that number of jumps from the given system (which includes the given system itself). If two numbers are given, the distance from he given system must be at least as high as the first number, and no more than the second. If no numbers are given, the planet must be in the given system or one of the systems it is linked to; this is equivalent to giving distances of 0 and 1.

{{{
distance ((<min>) <max>)
}}}

This is the same as the "near" tag, but gives distances relative to the origin planet. (So, this tag only makes sense within a "destination" filter, not within a "source" filter.)

= Non-Player Characters (NPCs) =

NPCs are ships that are associated with the mission in some way. This includes friendly ships the player must protect, and hostile ships the player must fight off or destroy:

{{{
npc (save | kill | board | disable | "scan cargo" | "scan outfits")*
    (enter | remain | wait) (<system>)
        near <system> ((<min>) <max>)
        distance ((<min>) <max>)
    dialog <text>
        <text>*
    conversation <name>
    conversation
        ...
    ship <model> <name>
    ship <model>
        ...
    fleet <name>
    fleet
        ...
}}}

Each "npc" tag may have one or more tags following it, specifying what the player must do with the given NPC:

  * save: The mission fails if the given NPC is destroyed.
  * kill: To complete the mission, the given NPC must be dead.
  * board: To complete the mission, the player must board the given NPC. If the ship is destroyed before being boarded, the mission fails.
  * disable: To complete the mission, the player must disable the given NPC.
  * "scan cargo": To complete the mission, the player must scan the given NPC's cargo. If the NPC is destroyed before being scanned, the mission fails.
  * "scan outfits": Same, but the player must use an outfit scanner instead of a cargo scanner.

{{{
(enter | remain | wait) (<system>)
    near <system> ((<min>) <max>)
    distance ((<min>) <max>)
}}}

This specifies what system the NPC starts out in and what they do there. If no system is specified either by name or through the "near" or "distance" child tags, the system will be the current system:

  * enter: the NPC will hyperspace into the given system as soon as the player takes off from this planet, and then remains in that system.
  * remain: the NPC starts out in the given system and will not leave there.
  * wait: the NPC starts out in the given system but will follow the player once the player enters that system (if it is able to).

For example, a ship you must repair would "wait" in another system (or possibly this one) until you arrive, and once it is repaired it will follow you. A pirate raid might "enter" a system or already be in progress, in which case it would "remain" in that system until you destroy all the ships. A bounty hunting mission would generally send you after a ship that is "remaining" somewhere nearby.

If no action is specified, the default NPC action is to take off from the planet along with the player. So, you would omit this node entirely for escort missions, for example.

The "near" and "distance" filters operate the same way they do in the descriptions in the previous section, and can be used instead of naming a particular system.

This specifies what system the NPC starts out in. If this is given, the NPC will remain idle in that system until the player arrives. If the word "system" appears without a specific system following it, that means the NPC starts out in the current system, but in space rather than on the planet. If no system tag appears, the NPC takes off from the planet along with the player.

{{{
dialog <text>
    <text>*
conversation <name>
conversation
    ...
}}}

This defines a dialog or conversation to be shown when you have first satisfied all the requirements of a given NPC. For more details on the syntax, see the "Triggers" section below.

If you want to retrieve passengers or cargo by boarding a ship, set up the mission so that you are considered to be carrying them from the very start (for example, the cargo might be called "reserved mission space" or "mission cargo"). Otherwise, it would be possible for the player to board a ship and then discover they do not have enough cargo or passenger space to complete the mission.

{{{
ship <model> <name>
ship <model>
    ...
}}}

This specifies a single ship as an NPC. There are two possible formats. The first format says to create a generic ship of the given model type (or named variant), such as "Falcon", or "Star Barge (Armed)". In that case, the ship will have the given name.

The second option is to give an entire ship specification, which can optionally include things like number of crew members remaining if you want to create a ship that starts out as a disabled "ghost ship."

{{{
fleet <name>
fleet
    ...
}}}

This specifies an entire fleet of ships. The first format refers to one or the standard fleets, such as "pirate raid" or "Small Republic". The second format gives a custom fleet, using the same syntax as  normal "fleet" data entry. Every ship in the fleet will have the requirements given in the first line (such as "kill" or "save").

*Eventually we may need to add other tags to this section describing special AI characteristics or other things.*

= Triggers =

A mission can also specify what happens at various key parts of the mission:

{{{
on (offer | complete | accept | decline | fail)
    dialog <text>
        <text>*
    conversation <name>
    conversation
        ...
    outfit <outfit> (<number>)
    payment (<value>)
    <condition> (= | += | -= | ++ | --) (value)
    (set | clear) <condition>
    event <name> (delay)
}}}

There are five events that can trigger a response of some sort:

  * offer: when the initial mission is offered. This is the place to put the conversation or dialog that introduces the mission.
  * complete: when the mission is completed. This is when the player gets paid.
  * accept: if the player agrees to accept a mission.
  * decline: if the player decides to decline a mission.
  * fail: if the mission fails.

Some of the events below usually only make sense for certain triggers, but all of them can be included in any trigger:

{{{
dialog <text>
    <text>*
}}}

This gives a message to be displayed in a dialog message to the user. If the trigger is "on offer", the dialog will have "accept" and "decline" buttons. Otherwise, it is a purely informational message and only an "okay" button is shown.

Each token following the "dialog" tag will be a separate paragraph. The first token may appear either on the same line or indented on a subsequent line.

As mentioned previously, text replacement is done on keywords like "`<destination>`" and "`<payment`" within the dialog text.

{{{
conversation <name>
conversation
    ...
}}}

This specifies that a conversation will be shown to the player at this point in the mission. When a mission is being offered, the conversation can return "accept" or "decline"; conversations can also return special values like "die" (if the conversation ends with the player dying) or "launch" (if the player should take off from the planet immediately).

As with the dialogs, text substitution is done throughout the conversation.

{{{
outfit <outfit> (<number>)
}}}

At this point in the mission, the named ship outfit (or some number of them, if a number is given) is installed in the player's flagship, or placed in the player's cargo if the flagship has no outfit space for it. If the number is negative, outfits are taken away. If a mission removes outfits in its "complete" phase, it cannot be completed unless that outfit exists. This makes it possible to loan the player an outfit for the duration of a mission, or to require that the player disable a non-NPC ship and steal a particular piece of technology from it.

If the outfit cannot be installed due to lack of space, a warning message will be shown so the player knows that the outfit is not actually active (and may in fact be lost if they leave the planet).

{{{
payment (<value>)
}}}

If the "payment" tag appears on its own, the player is paid the default amount for this mission, which is equal to:

1000 + (# of jumps from origin to destination) `*` (1000 `*` (# of passengers) + 100 `*` (tons of cargo))

If a value is given, that is the player's payment for reaching this step of the mission. Normally, a "payment" value would only be given in the "on complete" section, but you can also have a negative value to be subtracted if the player fails the mission, or you could use a "payment" to advance the player some money when they first accept a mission. If the "on complete" payment is negative, the player cannot complete the mission if they have fewer than that number of credits.

{{{
<condition> (= | += | -= | ++ | --) (value)
(set | clear) <condition>
}}}

This is used to adjust the "conditions" described previously, which form the requirements for other missions. You can either set the condition to a certain value (using the "=" operator), or add or subtract a value using "+=" or "-=". As a shortcut, "++" means "+= 1" and "--" means "-= 1". You must place a space between the condition, the operator, and the value in order for the parser to interpret it correctly.

The "set" and "clear" tags are shortcuts for "= 1" and "= 0".

To change the player's reputation or combat rating, you may alter the "reputation", "reputation: <Government>", or "combat rating" conditions. For example, a bounty hunting mission might automatically alter your reputation on whatever planet the mission ends on ("reputation"), and a mission for the Navy might improve your reputation with the Republic but reduce your reputation with the Free Worlds.

{{{
event <name> (<delay>)
}}}

This specifies that the given event happens at this point in the mission. Events may permanently alter planets or solar systems. If a delay is given, the event will occur that number of days from now, instead of happening immediately.

*Events have not been implemented yet.*